#!/usr/bin/env python3
import argparse
import json
import logging
import subprocess
from datetime import datetime
from typing import Dict, List, Optional

from dateutil import relativedelta
from git import GitCommandError, Repo
from rich.text import Text
from textual import events, on
from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical
from textual.screen import ModalScreen
from textual.widgets import Button, DataTable, Footer, Header, Label, Static

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


logger.setLevel(logging.DEBUG)  # Suppress git library logs


def relative_time(timestamp: float) -> str:
    """Convert a commit timestamp to a relative time string like '2 hours ago'."""
    dt = datetime.fromtimestamp(timestamp)
    now = datetime.now()
    diff = relativedelta.relativedelta(now, dt)
    if diff.years > 0:
        return f"{diff.years} year{'s' if diff.years > 1 else ''} ago"
    elif diff.months > 0:
        return f"{diff.months} month{'s' if diff.months > 1 else ''} ago"
    elif diff.days > 0:
        return f"{diff.days} day{'s' if diff.days > 1 else ''} ago"
    elif diff.hours > 0:
        return f"{diff.hours} hour{'s' if diff.hours > 1 else ''} ago"
    elif diff.minutes > 0:
        return f"{diff.minutes} minute{'s' if diff.minutes > 1 else ''} ago"
    else:
        return "just now"


def get_all_pr_info() -> Dict[str, str]:
    """
    Fetch pull request info for all branches using the GitHub CLI.
    Returns a dictionary mapping branch name (headRefName) to a string of PR info.
    """
    pr_map = {}
    try:
        logger.debug("Fetching PR info using GitHub CLI.")
        output = subprocess.check_output(
            ["gh", "pr", "list", "--state", "all", "--json", "headRefName,url,state"],
            text=True,
        )
        data = json.loads(output.strip()) if output.strip() else []
        for pr in data:
            head = pr.get("headRefName")
            state = pr.get("state", "UNKNOWN")
            url = pr.get("url", "")
            pr_entry = f"{state} ({url})"
            if head in pr_map:
                pr_map[head].append(pr_entry)
            else:
                pr_map[head] = [pr_entry]
        for branch in pr_map:
            pr_map[branch] = ", ".join(pr_map[branch])
        logger.debug("PR info fetched: %s", pr_map)
    except Exception as e:
        logger.debug("Failed to fetch PR info: %s", e)
    return pr_map


def get_remote_tracking(ref) -> str:
    """Return the remote tracking branch for a local branch ref, if it exists."""
    if ref.path.startswith("refs/heads/"):
        try:
            tracking = getattr(ref, "tracking_branch", lambda: None)()
            return tracking.name if tracking is not None else "None"
        except Exception as e:
            logger.debug(
                "Error fetching remote tracking for branch %s: %s", ref.path, e
            )
            return "Error"
    return "N/A"


def get_git_author() -> str:
    """Fetch the current Git user name from the gitconfig."""
    try:
        author = subprocess.check_output(
            ["git", "config", "--get", "user.name"], text=True
        ).strip()
        if author:
            return author
        else:
            return "Unknown"
    except Exception as e:
        logger.debug("Failed to fetch Git author from gitconfig: %s", e)
        return "Unknown"


class ConfirmationScreen(ModalScreen[bool]):
    """A confirmation dialog screen."""

    def __init__(self, message: str, title: str = "Confirm Action"):
        super().__init__()
        self.message = message
        self.title = title

    def compose(self) -> ComposeResult:
        with Container(id="confirmation-dialog"):
            yield Label(self.title, id="confirmation-title")
            yield Label(self.message, id="confirmation-message")
            with Horizontal(id="confirmation-buttons"):
                yield Button("Yes", id="confirm-yes", variant="error")
                yield Button("No", id="confirm-no", variant="default")

    @on(Button.Pressed, "#confirm-yes")
    def confirm_yes(self) -> None:
        self.dismiss(True)

    @on(Button.Pressed, "#confirm-no")
    def confirm_no(self) -> None:
        self.dismiss(False)


class StatusBar(Static):
    """A status bar widget for showing messages."""

    def __init__(self):
        super().__init__("Ready", id="status-bar")

    def set_message(self, message: str, style: str = "white"):
        """Set a message in the status bar."""
        self.update(Text(message, style=style))


class BranchTableApp(App):
    """Textual app to display Git branches in an interactive table."""

    CSS = """
    Screen {
        background: #1e1e1e;
    }
    Header, Footer {
        background: #333333;
        color: white;
    }
    DataTable {
        border: solid #444444;
        background: #222222;
        color: #cccccc;
    }
    DataTable > .datatable--header {
        background: #000000;
        color: white;
        text-style: bold;
    }
    DataTable > .datatable--row {
        background: #222222;
    }
    DataTable > .datatable--row:even {
        background: #2a2a2a;
    }
    DataTable > .datatable--row:odd {
        background: #222222;
    }
    DataTable > .datatable--cell {
        color: #cccccc;
    }
    DataTable > .datatable--cursor {
        background: darkorange;
        color: black;
    }
    #status-bar {
        dock: bottom;
        background: #333333;
        color: white;
        height: 1;
        padding: 0 1;
    }
    #confirmation-dialog {
        width: 60;
        height: 15;
        border: solid white;
        background: #2a2a2a;
        padding: 1;
    }
    #confirmation-title {
        text-align: center;
        text-style: bold;
        color: white;
        margin-bottom: 1;
    }
    #confirmation-message {
        text-align: center;
        color: #cccccc;
        margin-bottom: 2;
    }
    #confirmation-buttons {
        align: center middle;
        height: 3;
    }
    #confirmation-buttons Button {
        margin: 0 1;
    }
    """

    BINDINGS = [
        ("d", "delete_branch", "Delete branch"),
        ("r", "refresh", "Refresh"),
        ("c", "checkout", "Checkout"),
        ("u", "toggle_user_filter", "Toggle user filter"),
        ("q", "quit", "Quit"),
    ]

    def __init__(
        self, repo_path: str = ".", debug: bool = False, user_branches: bool = False
    ):
        super().__init__()
        self.repo_path = repo_path
        self.repo = Repo(repo_path)
        self.pr_info_map = get_all_pr_info()
        self.branches = []
        self.current_user = get_git_author()
        self.show_user_branches_only = user_branches
        self._debug = debug
        if self._debug:
            logging.basicConfig(level=logging.DEBUG)
        else:
            logging.basicConfig(level=logging.WARNING)

    def compose(self) -> ComposeResult:
        yield Header(show_clock=True)
        yield DataTable(id="branch_table")
        yield StatusBar()
        yield Footer()

    def on_mount(self) -> None:
        self.load_branches()
        self.status_bar.set_message(
            "Ready - Press 'r' to refresh, 'd' to delete, 'c' to checkout"
        )

    @property
    def status_bar(self) -> StatusBar:
        return self.query_one("#status-bar", StatusBar)

    def load_branches(self) -> None:
        """Load and display branches in the table."""
        data_table = self.query_one("#branch_table", DataTable)
        data_table.clear(columns=True)
        data_table.cursor_type = "row"
        data_table.focus()

        # Set up columns
        data_table.add_column(Text("Branch", style="bold cyan"))
        data_table.add_column(Text("Author", style="bold magenta"))
        data_table.add_column(Text("Remote Tracking", style="bold green"))
        data_table.add_column(Text("Last Updated", style="bold yellow"))
        data_table.add_column(Text("Merged", style="bold red"))
        data_table.add_column(Text("PR Info", style="bold blue"))

        # Build authors dictionary
        self.authors_dict = {}
        try:
            output = subprocess.check_output(
                ["git", "for-each-ref", "--format=%(authorname)%09%(refname)"],
                cwd=self.repo_path,
                text=True,
            )
            for line in output.strip().splitlines():
                parts = line.split("\t")
                if len(parts) >= 2:
                    author = parts[0].strip()
                    refname = parts[1].strip()
                    self.authors_dict[refname] = author
        except Exception as e:
            logger.debug("Failed to fetch author info: %s", e)

        # Collect branches
        self.branches = []
        for ref in self.repo.refs:
            if ref.path.startswith("refs/heads/") or ref.path.startswith(
                "refs/remotes/"
            ):
                # Filter by user if requested
                if self.show_user_branches_only:
                    author = self.authors_dict.get(ref.path, "Unknown")
                    if author != self.current_user:
                        continue
                self.branches.append(ref)

        # Sort branches by last commit date
        self.branches.sort(key=lambda r: r.commit.committed_date, reverse=True)

        # Populate table
        for ref in self.branches:
            if ref.path.startswith("refs/heads/"):
                short_name = ref.path[len("refs/heads/") :]
                merged_flag = "Yes" if self.is_merged(short_name) else "No"
            elif ref.path.startswith("refs/remotes/"):
                short_name = ref.path[len("refs/remotes/") :]
                merged_flag = "N/A"
            else:
                short_name = ref.path
                merged_flag = "N/A"

            author = self.authors_dict.get(ref.path, "Unknown")
            remote_tracking = get_remote_tracking(ref)
            last_updated = relative_time(ref.commit.committed_date)
            pr_info = self.pr_info_map.get(short_name, "None")

            data_table.add_row(
                short_name, author, remote_tracking, last_updated, merged_flag, pr_info
            )

        filter_status = " (user branches only)" if self.show_user_branches_only else ""
        self.status_bar.set_message(
            f"Loaded {len(self.branches)} branches{filter_status}"
        )

    def is_merged(self, branch_name: str) -> bool:
        """Check if a branch is merged into HEAD."""
        try:
            merged_branches = self.repo.git.branch("--merged").split("\n")
            merged_branches = [b.replace("*", "").strip() for b in merged_branches]
            return branch_name in merged_branches
        except Exception as e:
            logger.debug(
                "Error checking merge status for branch %s: %s", branch_name, e
            )
            return False

    def get_selected_branch(self) -> Optional[str]:
        """Get the currently selected branch name."""
        data_table = self.query_one("#branch_table", DataTable)
        if data_table.cursor_row is None:
            return None
        try:
            row = data_table.get_row_at(data_table.cursor_row)
            return row[0]  # Branch name is first column
        except Exception:
            return None

    def action_refresh(self) -> None:
        """Refresh the branch list."""
        self.status_bar.set_message("Refreshing...", "yellow")
        self.pr_info_map = get_all_pr_info()  # Refresh PR info too
        self.load_branches()

    def action_toggle_user_filter(self) -> None:
        """Toggle between showing all branches and user branches only."""
        self.show_user_branches_only = not self.show_user_branches_only
        self.load_branches()

    async def action_checkout(self) -> None:
        """Checkout the selected branch."""
        branch_name = self.get_selected_branch()
        if not branch_name:
            self.status_bar.set_message("No branch selected", "red")
            return

        # Don't checkout remote branches
        if "/" in branch_name:
            self.status_bar.set_message(
                "Cannot checkout remote branches directly", "red"
            )
            return

        try:
            self.status_bar.set_message(f"Checking out {branch_name}...", "yellow")
            self.repo.git.checkout(branch_name)
            self.status_bar.set_message(f"Checked out {branch_name}", "green")
        except GitCommandError as e:
            self.status_bar.set_message(f"Checkout failed: {e}", "red")

    async def action_delete_branch(self) -> None:
        """Delete the selected branch after confirmation."""
        branch_name = self.get_selected_branch()
        if not branch_name:
            self.status_bar.set_message("No branch selected", "red")
            return

        # Don't delete remote branches
        if "/" in branch_name:
            self.status_bar.set_message("Cannot delete remote branches directly", "red")
            return

        # Don't delete current branch
        current_branch = self.repo.active_branch.name
        if branch_name == current_branch:
            self.status_bar.set_message("Cannot delete the current branch", "red")
            return

        # Show confirmation dialog
        confirmed = await self.push_screen(
            ConfirmationScreen(
                f"Are you sure you want to delete branch '{branch_name}'?\n"
                f"This will delete both local and remote branches.",
                "Delete Branch",
            )
        )

        if confirmed:
            await self.delete_branch(branch_name)

    async def delete_branch(self, branch_name: str) -> None:
        """Delete a local branch and its remote tracking branch."""
        self.status_bar.set_message(f"Deleting branch {branch_name}...", "yellow")

        local_deleted = False
        remote_deleted = False
        errors = []

        # Delete local branch
        try:
            local_ref = self.repo.heads[branch_name]
            self.repo.delete_head(local_ref, force=True)
            local_deleted = True
            logger.debug("Deleted local branch: %s", branch_name)
        except Exception as e:
            error_msg = f"Failed to delete local branch: {e}"
            logger.debug(error_msg)
            errors.append(error_msg)

        # Delete remote branch if it exists
        try:
            # Find remote tracking branch
            remote_tracking = None
            for ref in self.repo.refs:
                if ref.path.startswith("refs/remotes/") and ref.name.endswith(
                    branch_name
                ):
                    remote_tracking = ref
                    break

            if remote_tracking:
                remote_name, remote_branch = remote_tracking.name.split("/", 1)
                # subprocess.check_call(
                #     ["git", "push", remote_name, "--delete", remote_branch],
                #     cwd=self.repo_path,
                #     capture_output=True,
                # )
                logger.debug(f"git push {remote_name} --delete {remote_branch}")
                remote_deleted = True
                logger.debug("Deleted remote branch: %s/%s", remote_name, remote_branch)
        except Exception as e:
            error_msg = f"Failed to delete remote branch: {e}"
            logger.debug(error_msg)
            errors.append(error_msg)

        # Show results
        if local_deleted and remote_deleted:
            self.status_bar.set_message(
                f"Successfully deleted {branch_name} (local and remote)", "green"
            )
        elif local_deleted:
            self.status_bar.set_message(
                f"Deleted local branch {branch_name} (no remote found)", "green"
            )
        elif errors:
            self.status_bar.set_message(f"Delete failed: {errors[0]}", "red")
        else:
            self.status_bar.set_message(
                f"Nothing to delete for {branch_name}", "yellow"
            )

        # Refresh the table
        self.load_branches()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Interactive Git Branch Manager")
    parser.add_argument(
        "--repo-path", default=".", help="Path to the local Git repository"
    )
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    parser.add_argument(
        "--user-branches",
        action="store_true",
        help="Show only branches created by the current Git user",
    )
    args = parser.parse_args()

    app = BranchTableApp(
        repo_path=args.repo_path, debug=args.debug, user_branches=args.user_branches
    )
    app.run()
